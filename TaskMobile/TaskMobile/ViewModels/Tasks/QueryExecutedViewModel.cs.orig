using Newtonsoft.Json;
using Prism.Commands;
using Prism.Navigation;
using Prism.Services;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using TaskMobile.WebServices;
using TaskMobile.WebServices.Entities;
using TaskMobile.WebServices.Entities.Common;
using Xamarin.Forms;
using Thread = System.Threading.Tasks;

namespace TaskMobile.ViewModels.Tasks
{
    public class QueryExecutedViewModel : BaseViewModel, INavigatingAware
    {
        private DelegateCommand<object> _toActivity;

        public QueryExecutedViewModel(INavigationService navigationService, IPageDialogService dialogService, IClient client) 
            : base(navigationService, dialogService,client)
        {
            Driver = "Jorge Tinoco";
            ExecutedTasks = new ObservableCollection<Models.Task>();
        }

        #region COMMANDS

        public DelegateCommand<object> ToActivityCommand =>
            _toActivity ?? (_toActivity = new DelegateCommand<object>(GoToActivities));

        public DelegateCommand<Models.Task> DetailsCommand
        {
            get
            {
                return new DelegateCommand<Models.Task>(async (task) =>
                {
                    await ShowDetails(task);
                });
            }
        }

        public DelegateCommand RefreshCommand
        {
            get
            {
                return new DelegateCommand(async () =>
                {
                    IsRefreshing = true;
                    await RefreshData();
                    IsRefreshing = false;
                });
            }
        }
        #endregion

        #region VIEW MODEL PROPERTIES

        /// <summary>
        /// Current executed  tasks.
        /// </summary>
        public ObservableCollection<Models.Task> ExecutedTasks { get; private set; }
        #endregion

        public async void OnNavigatingTo(NavigationParameters parameters)
        {
            try
            {
                await CheckVehicle();
                if (CurrentVehicle != null)
                    await RefreshData();
            }
            catch (Exception e)
            {
                App.LogToDb.Error(e);
                await _dialogService.DisplayAlertAsync("Error", "Ha ocurrido un error al descargar las tareas ejecutadas", "Entiendo");
            }
        }

        /// <summary>
        /// Navigate to <see cref="Views.Tasks.ExecutedToFinish"/> view.
        /// </summary>
        /// <param name="tapped">Selected task by the user.</param>
        private async void GoToActivities(object tapped)
        {
            NavigationParameters parameters = new NavigationParameters();
            parameters.Add("TaskToFinish", tapped);
            await _navigationService.NavigateAsync("ExecutedToFinish", parameters);
        }

        /// <summary>
        /// Query REST web services to get task details.
        /// </summary>
        /// <param name="tappedTask">Selected task by the user.</param>
        private async Task ShowDetails(Models.Task tappedTask)
        {
            try
            {
                IsRefreshing = true;
                int taskToExpand = tappedTask.Number;
                string stockType = tappedTask.Type;
                if (!tappedTask.Expanded)
                {
                    tappedTask.Clear();
<<<<<<< Updated upstream
                    Client RESTClient = new Client(WebServices.URL.RequestDetails);
                    Request<WebServices.Entities.DetailsRequest> Requests = new Request<WebServices.Entities.DetailsRequest>();
                    Requests.MessageBody.TaskId = TaskToExpand;
                    var Response = await RESTClient.Post<Response<WebServices.Entities.DetailsResponse>>(Requests);
                    if (Response.MessageLog.ProcessingResultCode == 0 && Response.MessageBody.QueryTaskDetailsResult != null)
                    {
                        Models.TaskDetail DetailHeaders = new Models.TaskDetail();
                        DetailHeaders.WorkOrder = "OP";
                        DetailHeaders.Lot = "Lote";
                        DetailHeaders.SapCode = "Código SAP";
                        DetailHeaders.PiecesText = "Piezas";
                        DetailHeaders.TonsText = "Toneladas";
                        DetailHeaders.RowIsHeader = true;
                        tappedTask.Add(DetailHeaders);
                        IEnumerable<Models.TaskDetail> LocalDetails = Response.MessageBody.QueryTaskDetailsResult.DETAILS.
                                                                        Select(detailToConvert => Converters.TaskDetail(detailToConvert, TaskToExpand, StockType));
                        tappedTask.Add(LocalDetails);
                    }
                    else
=======
                    // ws
                    var route = "GetRequestTasksDetails";
                    Request<DetailsRequest> request = new Request<DetailsRequest>();
                    request.MessageBody.TaskId = taskToExpand;
                    await Thread.Task.Run(() =>
>>>>>>> Stashed changes
                    {
                        string data = JsonConvert.SerializeObject(request);
                        WebService.Post<Response<DetailsResponse>>(route, data,
                            response =>
                            {
                                Device.BeginInvokeOnMainThread(async () =>
                                {
                                    double code = response.MessageLog.ProcessingResultCode;
                                    if (code.Equals(0) && response.MessageBody.QueryTaskDetailsResult != null)
                                    {
                                        IEnumerable<Models.TaskDetail> localDetails =
                                            response.MessageBody.QueryTaskDetailsResult.DETAILS.
                                                Select(
                                                    detailToConvert =>
                                                        Converters.TaskDetail(detailToConvert, taskToExpand, stockType))
                                                .ToList();
                                        tappedTask.Add(localDetails);
                                    }
                                    else
                                        await _dialogService.DisplayAlertAsync("Información", "No se encontró detalles",
                                            "Entiendo");
                                    tappedTask.Expanded = !tappedTask.Expanded;
                                    IsRefreshing = false;
                                });
                            }, OnWebServiceError);
                    });
                }
                else
                {
                    tappedTask.Expanded = !tappedTask.Expanded;
                    IsRefreshing = false;
                }
            }
            catch (Exception ex)
            {
                App.LogToDb.Error("Error al mostrar detalles de la tarea " + tappedTask.Number, ex);
                await _dialogService.DisplayAlertAsync("Error", "Algo ocurrió cuando mostrábamos los detalles", "Entiendo");
            }
        }
        
        /// <summary>
        /// Refresh the assigned task list view.
        /// </summary>
        /// <returns></returns>
        private async Task RefreshData()
        {
            IsRefreshing = true;
            var route = "GetRequestTasks";
            Request<TaskRequest> request = new Request<TaskRequest>
            {
<<<<<<< Updated upstream
                var AllTasks = Response.MessageBody.QueryTaskResult.SelectMany(x => x.TASK);
                var Ordered = AllTasks.OrderByDescending(x => x.CREATED_DATE);
                var TasksConverted = Ordered.Select(taskToConvert => Converters.Task(taskToConvert));
                foreach (var item in TasksConverted)
                {
                    ExecutedTasks.Add(item);
=======
                MessageBody =
                {
                    VehicleId = int.Parse(CurrentVehicle.Identifier),
                    Status = "E",
                    InitialDate = new DateTime(2016, 01, 01),
                    FinalDate = DateTime.Now
>>>>>>> Stashed changes
                }
            };
            await Thread.Task.Run(() =>
            {
                string data = JsonConvert.SerializeObject(request);
                WebService.Post<Response<TaskResponse>>(route, data,
                  response =>
                  {
                      Device.BeginInvokeOnMainThread(async () => {
                          ExecutedTasks.Clear();
                          double code = response.MessageLog.ProcessingResultCode;
                          List<TaskResult> tasks = response.MessageBody.QueryTaskResult;
                          if (code.Equals(0) && tasks.Any())
                          {
                              foreach (TaskResult result in tasks)
                              {
                                  IEnumerable<Models.Task> tasksConverted = result.TASK
                                                                                  .Select(taskToConvert => Converters.Task(taskToConvert));
                                  foreach (var taskToAdd in tasksConverted)
                                  {
                                      ExecutedTasks.Add(taskToAdd);
                                  }
                              }
                          }
                          else
                              await _dialogService.DisplayAlertAsync("Información", "No se encontró tareas asociadas al vehículo ", "Entiendo");
                          IsRefreshing = false;
                      });
                  }, OnWebServiceError);
            });
        }

    }
}
